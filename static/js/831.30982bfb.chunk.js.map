{"version":3,"file":"static/js/831.30982bfb.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/Container/Container.styled.js","components/Form/Form.styled.js","components/Form/Form.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Contacts/ContactList.styled.js","components/Contacts/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 50px auto;\n  padding: 20px;\n  width: 320px;\n  border-radius: 5px;\n  background-color: ${props => props.theme.colors.white};\n  box-shadow: ${props => props.theme.shadows.shadow};\n  h1 {\n    margin-top: 0;\n    margin-bottom: 10px;\n  }\n`;\nexport const Button = styled.button`\n  border-radius: 5px;\n  border: 1px solid ${props => props.theme.colors.black};\n  padding: 4px;\n  font-size: 16px;\n  text-transform: uppercase;\n  color: ${props => props.theme.colors.black};\n  :not(:last-child) {\n    margin-right: 10px;\n  }\n  transition: ${props => props.theme.transition.cubicBezier};\n  :hover {\n    border: 1px solid ${p => p.theme.colors.white};\n    background-color: ${p => p.theme.colors.lightBlue};\n    color: ${props => props.theme.colors.white};\n  }\n  :active {\n    border: 1px solid ${p => p.theme.colors.lightBlue};\n    background-color: ${p => p.theme.colors.white};\n    color: ${props => props.theme.colors.lightBlue};\n  }\n`;\n","import styled from 'styled-components';\n\nexport const FormStyle = styled.form`\n  max-width: 200px;\n  border: ${props => props.theme.colors.lightBlue};\n  border-radius: 5px;\n  margin-bottom: 10px;\n`;\n\nexport const LabelForm = styled.label`\n  color: ${p => p.theme.colors.grey};\n`;\n\nexport const InputForm = styled.input`\n  margin-top: 0px;\n  outline: none;\n  border: 1px solid ${p => p.theme.colors.lightBlue};\n  border-radius: 5px;\n  &:first-child {\n    margin-bottom: 10px;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'components/Container/Container.styled';\nimport { FormStyle, InputForm, LabelForm } from './Form.styled';\n\nexport const ContactForm = ({ onSubmit }) => {\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const name = evt.currentTarget.elements.name.value;\n    const number = evt.currentTarget.elements.number.value;\n    onSubmit({ name, number });\n    evt.currentTarget.reset();\n  };\n\n  return (\n    <FormStyle onSubmit={handleSubmit}>\n      <LabelForm>\n        Name{' '}\n        <InputForm\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </LabelForm>\n      <LabelForm>\n        Number{' '}\n        <InputForm\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </LabelForm>\n      <Button type=\"submit\">Add contact</Button>\n    </FormStyle>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const LabelFilter = styled.label`\n  display: block;\n  color: ${props => props.theme.colors.gray};\n`;\n\nexport const InputFilter = styled.input`\n  display: block;\n  margin-top: 0px;\n  outline: none;\n  border: 1px solid ${p => p.theme.colors.lightBlue};\n  border-radius: 5px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputFilter, LabelFilter } from './Filter.styled';\n\nexport const Filter = ({ filter, handleChange }) => (\n  <LabelFilter>\n    Find contacts by Name\n    <InputFilter\n      onChange={handleChange}\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n    />\n  </LabelFilter>\n);\n\nFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ContactListStyle = styled.ul`\n  margin-top: 10px;\n  padding-left: 0;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Button } from '../Container/Container.styled';\nimport { ContactItem, ContactListStyle } from './ContactList.styled';\n\nexport const ContactsList = ({ contacts, onDeleteContact }) => {\n  return (\n    <>\n      <h2>Contacts</h2>\n      <ContactListStyle>\n        {contacts.map(({ id, name, number }) => (\n          <ContactItem key={id}>\n            {name}: {number}\n            <Button type=\"button\" onClick={() => onDeleteContact(id)}>\n              Delete\n            </Button>\n          </ContactItem>\n        ))}\n      </ContactListStyle>\n    </>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { nanoid } from 'nanoid';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { useEffect } from 'react';\nimport { ContactForm } from 'components/Form/Form';\nimport { Filter } from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport {\n  addContactsThunk,\n  deleteContactsThunk,\n  fetchContactsThunk,\n} from 'redux/contacts/contactOperations';\nimport { Container } from 'components/Container/Container.styled';\nimport { ContactsList } from 'components/Contacts/ContactList';\nimport { useAuth } from 'hooks';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n  const { isLoggedIn } = useAuth();\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n    dispatch(fetchContactsThunk());\n  }, [dispatch, isLoggedIn]);\n\n  const handleSubmit = ({ name, number }) => {\n    const newContact = { id: nanoid(), name, number };\n    const checkUser = contacts.some(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    checkUser\n      ? toast.warn(`${name} is already in the contacts`)\n      : dispatch(addContactsThunk(newContact));\n    toast.success(`Contact ${name} has added to phonebook`);\n  };\n\n  const handleChange = evt => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n\n  const getFilteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContactsThunk(id));\n    toast.success(`Contact has deleted from phonebook`);\n  };\n  return (\n    <Container>\n      {isLoading && <Loader />}\n      {error !== null && <p>Error: {error}</p>}\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={handleSubmit} />\n      <Filter handleChange={handleChange} filter={filter} />\n      <ContactsList\n        contacts={getFilteredContacts}\n        onDeleteContact={handleDeleteContact}\n      />\n    </Container>\n  );\n}\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Container","styled","props","theme","colors","white","shadows","shadow","Button","black","transition","cubicBezier","p","lightBlue","FormStyle","LabelForm","grey","InputForm","ContactForm","onSubmit","evt","preventDefault","name","currentTarget","elements","value","number","reset","type","pattern","title","required","LabelFilter","gray","InputFilter","Filter","filter","handleChange","onChange","ContactListStyle","ContactItem","ContactsList","contacts","onDeleteContact","map","onClick","Contacts","useSelector","selectContacts","selectFilter","isLoading","selectIsLoading","error","selectError","dispatch","useDispatch","isLoggedIn","useAuth","useEffect","fetchContactsThunk","getFilteredContacts","contact","toLowerCase","includes","Loader","newContact","some","toast","addContactsThunk","setFilter","deleteContactsThunk"],"sourceRoot":""}